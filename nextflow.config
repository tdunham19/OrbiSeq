singularity.enabled=true

params {

  // -------------------------
  // input/output directories
  // -------------------------
  outdir	          = "$baseDir/results/" 
  outputDir           = "$outdir"
  summary_file	      = "$baseDir/summary/*.txt"
  publish_dir_mode    = "link"
  
  // default platform, reference, and fastq directory
  platform         = "null"
  fastq_dir        = "null"
  reference        = "null"

  // pattern to match for fastq files
  nanopore_input_pattern    = "*.fastq*"

  // where scripts written by Mark Stenglein are found
  script_dir       = "$baseDir/scripts/"
  
  // default mpileup save
  save_mpileup               = false
  
  // perform pycoqc on nanopore data ?
  pycoqc = true 
  
}

// include nanopore-specific parameter settings
includeConfig "${projectDir}/nanopore.config"

// include illumina-specific parameter settings
includeConfig "${projectDir}/illumina.config"

// include a test profile for illumina
profiles {
  test_illumina { 
    includeConfig 'conf/test_illumina.config'
  }
}

// include a test profile for nanopore
profiles {
  test_nanopore { 
    includeConfig 'conf/test_nanopore.config'
  }
}

  manifest {
    name            = 'tdunham19/OrbiSeq'
    author          = 'Tillie Dunham'
    defaultBranch   = 'main'
    homePage        = 'https://github.com/tdunham19/OrbiSeq'
    description     = 'OrbiSeq is a Nextflow pipeline to analyze short and long sequences for Orbiviruses.'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.10.1'
    version         = '1.0'
	}

process {
   // setup saving output files
   withLabel: '!no_publish' {
      publishDir = [
          path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
          mode: params.publish_dir_mode,
      ]
   }

	// save final output files from illumina workflow
	withName: 'ILLUMINA_CONSENSUS:BOWTIE2_BUILD_ALIGN_FINAL_(VC|IVAR)' {
     publishDir = [
		 [
         path:    { "${params.outdir}/final_consensus_illumina" },
         mode:    "copy",
         pattern: "*.fasta"
       ] ,
       [
         path:    { "${params.outdir}/final_consensus_illumina" },
         mode:    params.publish_dir_mode,
         pattern: "*.bam"
       ]
	  ]
   }
   
   // save final output files from illumina workflow
	withName: 'ILLUMINA_CONSENSUS:RENAME_ONE_ALN' {
     publishDir = [
       [
         path:    { "${params.outdir}/best10_illumina" },
         mode:    "copy",
         pattern: "*.bam"
       ]
	  ]
   }
   
   // save final output files from illumina workflow
	withName: 'ILLUMINA_CONSENSUS:IDENTIFY_BEST_SEGMENTS_FROM_SAM' {
     publishDir = [
       [
         path:    { "${params.outdir}/best10_illumina" },
         mode:    "copy",
         pattern: "*.fa"
       ] 
	  ]
   }
   
   // save final output files from illumina workflow
	withName: 'ILLUMINA_CONSENSUS:PREPROCESS_READS:FASTQC_PRE' {
     publishDir = [
       [
         path:    { "${params.outdir}/quality_assessment_illumina" },
         mode:    "copy",
         pattern: "*.html"
       ]
	  ]
   }
   
   // save final output files from illumina workflow
	withName: 'ILLUMINA_CONSENSUS:PREPROCESS_READS:FASTQC_POST_TRIM' {
     publishDir = [
       [
         path:    { "${params.outdir}/quality_assessment_illumina" },
         mode:    "copy",
         pattern: "*.html"
       ]
	  ]
   }
   
   // save final output files from illumina workflow
	withName: 'ILLUMINA_CONSENSUS:PREPROCESS_READS:FASTQC_POST_COLLAPSE' {
     publishDir = [
       [
         path:    { "${params.outdir}/quality_assessment_illumina" },
         mode:    "copy",
         pattern: "*.html"
       ]
	  ]
   }
   
   // save final output files from illumina workflow
	withName: 'ILLUMINA_CONSENSUS:PREPROCESS_READS:MULTIQC_PRE' {
     publishDir = [
       [
         path:    { "${params.outdir}/quality_assessment_illumina" },
         mode:    "copy",
         pattern: "*.html"
       ]
	  ]
   }
   
   // save final output files from illumina workflow
	withName: 'ILLUMINA_CONSENSUS:PREPROCESS_READS:MULTIQC_POST' {
     publishDir = [
       [
         path:    { "${params.outdir}/quality_assessment_illumina" },
         mode:    "copy",
         pattern: "*.html"
       ]
	  ]
   }

	// save final output files from nanopore workflow
	withName: 'NANOPORE_CONSENSUS:MINIMAP2_ALIGN_FINAL_VC' {
     publishDir = [
		 [
         path:    { "${params.outdir}/final_consensus_nanopore" },
         mode:    "copy",
         pattern: "*.fasta"
       ] ,
       [
         path:    { "${params.outdir}/final_consensus_nanopore" },
         mode:    params.publish_dir_mode,
         pattern: "*.bam"
       ]
	  ]
   }
   
   // save final output files from nanopore workflow
	withName: 'NANOPORE_CONSENSUS:RENAME_ONE_ALN' {
     publishDir = [
       [
         path:    { "${params.outdir}/best10_nanopore" },
         mode:    "copy",
         pattern: "*.bam"
       ]
	  ]
   }
   
   // save final output files from nanopore workflow
	withName: 'NANOPORE_CONSENSUS:IDENTIFY_BEST_SEGMENTS_FROM_SAM' {
     publishDir = [
       [
         path:    { "${params.outdir}/best10_nanopore" },
         mode:    "copy",
         pattern: "*.fa"
       ] 
	  ]
   }
   
   // save final output files from nanopore workflow
	withName: 'NANOPORE_CONSENSUS:NANOPLOT' {
     publishDir = [
       [
         path:    { "${params.outdir}/quality_assessment_nanopore" },
         mode:    "copy",
         pattern: "*-report.html"
       ]
	  ]
   }
   
   // save final output files from nanopore workflow
	withName: 'NANOPORE_CONSENSUS:PYCOQC' {
     publishDir = [
       [
         path:    { "${params.outdir}/quality_assessment_nanopore" },
         mode:    "copy",
         pattern: "*.html"
       ]
	  ]
   }

}


  // --------------------------------------------------
  // STENGLEIN LAB : read_preprocessing nextflow.config
  // --------------------------------------------------

process {

  // ------------------------------------------------------------
  // setup resource usage limits for different types of processes
  // ------------------------------------------------------------

  // high memory process like blastn (using nt database)
  withLabel: 'highmem' {
    maxForks = 2
    cpus = 24
  }

  // low memory processes that use multi-threading
  // like bowtie2
  withLabel: 'lowmem_threaded' {
    maxForks = 8
    cpus = 8
  }

  // low memory processes that don't use multi-threading
  withLabel: 'lowmem_non_threaded' {
    maxForks = 24
    cpus = 1
  }
}

/*
   Profiles allow you to run on different servers or with different base configurations

   See: https://www.nextflow.io/docs/latest/config.html#config-profiles
*/
profiles {

  local {
    exector.name = 'local'
    // if the pipeline has to access system paths outside of $HOME, $PWD, etc 
    // have to bind those paths to singularity.
    // see: https://sylabs.io/guides/latest/user-guide/bind_paths_and_mounts.html
    // in this profile, we are pointing to local intallations of NCBI databases 
    //so need to access those paths
    singularity.runOptions = "--bind /home/databases"
  }

  conda {
    conda.enabled          = true
    singularity.enabled    = false
    conda.cacheDir         = "$HOME/conda_cacheDir"
  }

  singularity {
    params.enable_conda    = false
    singularity.enabled    = true
    singularity.autoMounts = true
    singularity.cacheDir   = "$HOME/singularity_cacheDir"
  }

  test {
    includeConfig 'conf/test.config'
  }
}

manifest {
    name            = 'stenglein-lab/read_preprocessing'
    author          = 'Mark Stenglein'
    defaultBranch   = 'main'
    homePage        = 'https://github.com/stenglein-lab/read_preprocessing'
    description     = 'A nextflow workflow / pipeline to perform common NGS read preprocessing. This can be used as stand-alone or can be used as subworkflow in another nextflow pipeline.'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.0'
    version         = '1.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
// From nf-core pipelines
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}


// Turn this option on to delete all intermediate files from the analysis
// see: https://www.nextflow.io/docs/latest/config.html
// cleanup = true


  // ----------------------------------------------------
  // STENGLEIN LAB : read_preprocessing preprocess.config
  // ----------------------------------------------------

params {

  // -------------------------
  // Input/Output directories
  // -------------------------
  refseq_dir       = "$baseDir/subworkflows/stenglein_lab/refseq/"
  input_pattern    = "*_R[12]*.fastq*"

  // create hard links of output files in results folder
  publish_dir_mode          = "link"

  // pattern to match for fastq files
  fastq_pattern             = "*_R[12]*.fastq*"

  // collapse duplicate reads in input fastq? 
  collapse_duplicate_reads  = false

  initial_fastqc_dir    = "${params.outdir}/illumina_preprocessing/initial_fastqc/"
  post_trim_fastqc_dir  = "${params.outdir}/illumina_preprocessing/post_trim_fastqc/"
  counts_out_dir        = "${params.outdir}/illumina_preprocessing/fastq_counts/"
  fastq_out_dir         = "${params.outdir}/illumina_preprocessing/trimmed_fastq/"
  fastq_out_dedup_dir   = "${params.outdir}/illumina_preprocessing/trimmed_deduplicated_fastq/"

  // reports on running the pipeline itself
  tracedir = "${outdir}/pipeline_info"

  // where are R and shell scripts are found.
  bin_dir  = "${baseDir}/bin"

  // ------------------
  // Trimming settings 
  // ------------------
  always_trim_5p_bases = "0"
  always_trim_3p_bases = "1"

  // if you have very short library molecules may want to change this
  post_trim_min_length = 30

  // ---------------------------------------
  // adapter sequences to trim off of reads
  // ---------------------------------------
  // 3' adapter sequences will be trimmed from the end of reads 
  adapters_3p          = "${params.refseq_dir}/adapters_3p.fasta"
  // 5' adapter sequences will be trimmed from the beginning of reads 
  adapters_5p          = "${params.refseq_dir}/adapters_5p.fasta"

  // ----------------
  // BBDUK parameters
  // ----------------
  // use BBDUK to do a second pass to remove any reads that still
  // have Illumina adapter sequences even after cutadapt trimming
  bbduk_kmer_length    = 15
  bbduk_hdist          = 1
  bbduk_polyg_length   = 8
  bbduk_adapters       = "${params.refseq_dir}/adapters_for_bbduk.fasta"
  bbduk_min_length     = 30

  // cd-hit-dup cutoff for collapsing reads with >= this much fractional similarity
  dedup_prefix_length      = "30"
  dedup_mismatches_allowed = "2"
  params.dedup_percent_id  = "0.99"

  // singularity_pull_docker_container option
  //
  // turn this parameter on to pull docker containers and convert to singularity
  //
  // see e.g.: https://nf-co.re/gwas#quick-start, which states:
  //
  //   "If you are persistently observing issues downloading Singularity images directly
  //    due to timeout or network issues then please use the --singularity_pull_docker_container
  //    parameter to pull and convert the Docker image instead."
  //
  // TODO: this option is provided in nf-core pipelines but is it necessary?
  //       possibly remove this option and the corresponding if/else statment in processes?
  //

  singularity_pull_docker_container = false

  // Max resource options
  // Defaults only, expecting to be overwritten
  max_memory                 = '384.GB'
  max_cpus                   = 64
  max_time                   = '240.h'

}

  // ---------------------------------------------------
  // STENGLEIN LAB : read_preprocessing conf/base.config
  // ---------------------------------------------------

/*
========================================================================================
    nf-core/mycosnp Nextflow base config file
========================================================================================
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 72.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 72.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 72.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 120.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 3
    }
    //withName:CUSTOM_DUMPSOFTWAREVERSIONS {
    //    cache = false
    //}
}


  // ------------------------------------------------------
  // STENGLEIN LAB : read_preprocessing conf/modules.config
  // ------------------------------------------------------
  
  /*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

//
// General configuration options
//

process {
    withLabel: '!no_publish' {
       publishDir = [
           path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
           mode: params.publish_dir_mode,
           saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
       ]
    }

    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}

// CUTADAPT options
process {
    withName: 'CUTADAPT' {
        // trimming args applied to single-end and paired-end data
        ext.args   = [
                "-q 30,30",
                "--minimum-length ${params.post_trim_min_length}",
                "-a file:${params.adapters_3p}",
                "-g file:${params.adapters_5p}",
                "-u ${params.always_trim_5p_bases}",
                "-u -${params.always_trim_3p_bases}",
            ].join(' ').trim()
        // paired-end trimming args
        ext.args2  = [
                "-A file:${params.adapters_3p}",
                "-G file:${params.adapters_5p}",
                "-U ${params.always_trim_5p_bases}",
                "-U -${params.always_trim_3p_bases}"
            ].join(' ').trim()
        ext.prefix = { "${meta.id}.cutadapt.trim" }
        publishDir = [
            [
                path: { "${params.outdir}/illumina_preprocessing/cutadapt" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ]
        ]
    }
}

// BBDUK options
process {
    withName: 'BBMAP_BBDUK' {
        ext.args   = [
                "k=${params.bbduk_kmer_length}",
                "hdist=${params.bbduk_hdist}",
                "tossjunk=t",
                "minlen=${params.bbduk_min_length}",
                "trimpolygright=${params.bbduk_polyg_length}"
            ].join(' ').trim()
        ext.prefix = { "${meta.id}.trim" }
    }
}

// MULTIQ_PRE options
process {
    withName: 'MULTIQC_PRE' {
        ext.args   = [
                "--filename pre_trimming_and_trimming_multiqc_report.html"
            ].join(' ').trim()
    }
}

process {
    withName: 'MULTIQC_POST' {
        ext.args   = [
                "--filename post_trimming_multiqc_report.html"
            ].join(' ').trim()
    }
}


// SAVE_FASTQ_OUTPUT options
process {
    withName: 'SAVE_FASTQ_OUTPUT' {
        publishDir = [
            [
                path: { "${params.fastq_out_dir}" },
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz"
            ]
        ]
    }
}

// SAVE_FASTQ_DEDUP_OUTPUT (duplicate reads collapsed) options
process {
    withName: 'SAVE_FASTQ_DEDUP_OUTPUT' {
        publishDir = [
            [
                path: { "${params.fastq_out_dedup_dir}" },
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz"
            ]
        ]
    }
}

// CD_HIT_EST options
/*
process {
    withName: 'CD_HIT_EST' {
        ext.args   = [
                "-c ${params.dedup_percent_id}"
            ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/cd-hit" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ]
        ]
    }
}
*/
// CD-HIT-DUP options
process {
    withName: 'COLLAPSE_DUPLICATE_READS' {
        ext.args   = [
                "-u ${params.dedup_prefix_length}",
                "-e ${params.dedup_mismatches_allowed}"
            ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/illumina_preprocessing/cd-hit-dup" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ]
        ]
    }
}

process {
  withName: 'FASTQC_POST_TRIM' {
    ext.prefix = { "${meta.id}.trim" }
  }
}

process {
  withName: 'FASTQC_POST_TRIM' {
    ext.prefix = { "${meta.id}.trim" }
  }
}

process {
  withName: 'FASTQC_POST_COLLAPSE' {
    ext.prefix = { "${meta.id}.uniq" }
  }
}

process {
  withLabel: "no_publish_output" {
    publishDir = []
  }
}


process {
  withName: 'PROCESS_FASTQ_COUNTS' {
    publishDir = [
        path: { "${params.outdir}" } ,
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
}
  
  // ---------------------------------------------------
  // STENGLEIN LAB : read_preprocessing conf/test.config
  // ---------------------------------------------------
